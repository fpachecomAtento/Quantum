var mongoose = require('mongoose');
var colors = require('colors');


module.exports = {
	properties : {},
	__construct : function(properties){
		this.properties = properties;
	},	
	startConnection : function(callback){
		var objectConnection = {
			server : this.properties.server,
			base : this.properties.base,
			user : this.properties.user,
			password : this.properties.password,
			port : this.properties.port,
			createSchema : this.createSchema
		};

		mongoose.connect('mongodb://'+objectConnection.user+':'+objectConnection.password
				+'@'+objectConnection.server
				+':'+objectConnection.port+'/'+objectConnection.base, function(error){
			if(error){
				console.log(error);
			}
			else{
				console.log(colors.green('Conectado a MongoDB \nEn el server: '
					+colors.yellow(objectConnection.server)
					+'\nA la base de datos: '+colors.yellow(objectConnection.base)));

				var confirm = objectConnection.createSchema();
				if(confirm)
					callback();
			}
		});
	},
	createSchema : function(properties){
		console.log('Creando Schema'.red);

		var Schema = mongoose.Schema;
		var listStatus = [
					'active',
					'disable',
					'delete'
					];

		/* Version App */
		var appVersionSchema = new Schema({
			nameVersion : {type:String,required:[true,'El nombre es requerido']},
			stringVersion : String,
			dateRelease : Date,
			devVersion : Boolean
		});
		module.exports = mongoose.model('appVersion', appVersionSchema);

		var validateMail = [/^\w+([\.-]?\w+)*@\w+([\.-]?\w+)*(\.\w{2,3})+$/, 'Ingresa un mail valido'];

		/* User */
		var userSchema = new Schema({
			user : {
				index: { 
					unique: true
				},
				type: String,
				required : 'El user es obligatorio',
				maxlength : [12, 'El usuario excede los 12 caracteres permitidos'],
				minlength : [8, 'El usuario no cumple con 6 caracteres minimo']
			},
			name : {type: String, required: "El nombre es obligatorio"},
			email : {
				type : String,
				required : 'El email es obligatorio',
				match : validateMail
			},
			surname : String,
			company : String,
			password : {
				type: String,
				required : 'La contraseña es obligatoria',
				maxlength : [12, 'La contraseña es muy larga, maximo 12 caracteres'],
				minlength : [8, 'La contraseña es muy corta, minimo 8 caractares']
			},
			tokens : {
				cosumer : String,
				secret : String
			},
			status : {
				type : String,
				required : 'El estatus es requerido',
				enum : listStatus,
				message : 'Valor no encontrado'
			}
		});
		module.exports = mongoose.model('user', userSchema);

		/* Apps */
		var appsSchema = new Schema({
			user : String,
			company : String,
			versionApp : String,
			theme : String,
			title : String,
			logo : {
				logoType : String,
				logSrc : String
			},
			messages : {
				welcome : String,
				wait : String
			},
			crm : String
		});
		module.exports = mongoose.model('apps', appsSchema);

		/* Companys */
		var companysSchema = new Schema({
			user : String,
			nameCompany : String,
		});
		module.exports = mongoose.model('companys', companysSchema);

		/* Queues */
		var queuesSchema = new Schema({
			user : String,
			company : String,
			icon : String,
			name : String,
			caption : String
		});
		module.exports = mongoose.model('queues',queuesSchema);

		/* CRM */
		var crmSchema = new Schema({
			user : String,
			company : String,
			name : String,
			message : String,
			active : String
		});
		module.exports = mongoose.model('crm',crmSchema);

			/* CRM.fields */
			var crmField = new Schema({
				crm : String,
				name : String,
				type : String,
				label : String,
				labelError : String,
				placeHolder : String,
				require : Boolean,
				length : {
					lengthMax : Number,
					lengthMin : Number
				},
				both : Boolean
			});
			module.exports = mongoose.model('crmField',crmField);

		return true;
	}
};

